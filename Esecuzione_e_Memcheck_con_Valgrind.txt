##################################### LISTE COLLEGATE ########################################################

gcc -g -Wall -Wextra listeCollegate.c && valgrind ./a.out 

==10888== Memcheck, a memory error detector
==10888== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10888== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==10888== Command: ./a.out
==10888== 
********* Test Liste collegate *********
Situazione della Lista dopo l'inserimento dei nodi:
3 39 35 20 15 12 7 38 28 23 19 16 10 47 30 21 14 41 17 26 
La dimensione della Lista è: 20

Inserire la chiave da cercare: 47
Ricerca del nodo con chiave 47:
Trovato
Situazione della Lista dopo la cancellazione del nodo il cui valore è 47:
3 39 35 20 15 12 7 38 28 23 19 16 10 30 21 14 41 17 26 
La dimensione della Lista è: 19
==10888== 
==10888== HEAP SUMMARY:
==10888==     in use at exit: 24 bytes in 1 blocks
==10888==   total heap usage: 23 allocs, 22 frees, 2,544 bytes allocated
==10888== 
==10888== LEAK SUMMARY:
==10888==    definitely lost: 24 bytes in 1 blocks
==10888==    indirectly lost: 0 bytes in 0 blocks
==10888==      possibly lost: 0 bytes in 0 blocks
==10888==    still reachable: 0 bytes in 0 blocks
==10888==         suppressed: 0 bytes in 0 blocks
==10888== Rerun with --leak-check=full to see details of leaked memory
==10888== 
==10888== For lists of detected and suppressed errors, rerun with: -s
==10888== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

##################################### TABELLE HASH ########################################################

gcc -g -Wall -Wextra hashTable.c && valgrind ./a.out 

hashTable.c:49:1: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
   49 | const unsigned int hashFunction(hashtable_t *hashtbl, const int v);   // Funzione Modulo: implementata
      | ^~~~~
hashTable.c:223:1: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
  223 | const unsigned int hashFunction(hashtable_t *hashtbl, const int v) // implementata; v è una costante
      | ^~~~~
==10937== Memcheck, a memory error detector
==10937== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10937== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==10937== Command: ./a.out
==10937== 
Inserire la dimensione m della hashtable: 
10

Queste sono le chiavi che voglio mappare nella tabella hash:
26 17 41 14 21 30 47 10 16 19 23 28 38 7 12 15 20 35 39 3 

---------- TABELLA HASH DOPO INSERIMENTO DEI NODI ----------
0 => 20 10 30 
1 => 21 41 
2 => 12 
3 => 3 23 
4 => 14 
5 => 35 15 
6 => 16 26 
7 => 7 47 17 
8 => 38 28 
9 => 39 19 

Dimensione Hash Table dopo inserimento dei nodi:        10
Inserire una chiave da ricercare nella HT: 47
Elemento trovato: 47
Inserire il nodo da cercare e, successivamente eliminare: 47

---------- TABELLA HASH DOPO ELIMINAZIONE DEL NODO 47 ----------
0 => 20 10 30 
1 => 21 41 
2 => 12 
3 => 3 23 
4 => 14 
5 => 35 15 
6 => 16 26 
7 => 7 17 
8 => 38 28 
9 => 39 19 
==10937== 
==10937== HEAP SUMMARY:
==10937==     in use at exit: 160 bytes in 11 blocks
==10937==   total heap usage: 44 allocs, 33 frees, 2,864 bytes allocated
==10937== 
==10937== LEAK SUMMARY:
==10937==    definitely lost: 80 bytes in 1 blocks
==10937==    indirectly lost: 80 bytes in 10 blocks
==10937==      possibly lost: 0 bytes in 0 blocks
==10937==    still reachable: 0 bytes in 0 blocks
==10937==         suppressed: 0 bytes in 0 blocks
==10937== Rerun with --leak-check=full to see details of leaked memory
==10937== 
==10937== For lists of detected and suppressed errors, rerun with: -s
==10937== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

##################################### ALBERI RED BLACK ########################################################

gcc -g -Wall -Wextra rbt.c && valgrind ./a.out 

==10986== Memcheck, a memory error detector
==10986== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10986== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==10986== Command: ./a.out
==10986== 

******************** RBT INSERT ********************

Visita IN-ORDER
Nodo:   3       colore: R
Nodo:   7       colore: B
Nodo:   10      colore: R
Nodo:   12      colore: B
Nodo:   14      colore: B
Nodo:   15      colore: R
Nodo:   16      colore: B
Nodo:   17      colore: R
Nodo:   19      colore: B
Nodo:   20      colore: R
Nodo:   21      colore: B
Nodo:   23      colore: B
Nodo:   26      colore: B
Nodo:   28      colore: B
Nodo:   30      colore: R
Nodo:   35      colore: R
Nodo:   38      colore: B
Nodo:   39      colore: R
Nodo:   41      colore: B
Nodo:   47      colore: B

Dimensione dell'albero: 20
Radice: 26 di colore: B
Il Padre della radice è T->nil

******************** RBT SEARCH ********************
Inserire il valore da cercare: 47
Trovato

******************** MINIMO-MASSIMO ********************
Il nodo minimo vale: 3
Il nodo massimo vale: 47

******************** ALTEZZA ALBERO ********************
Visualizzo altezza albero (visitandolo in PreOrder):
Nodo:   26      colore: B       Altezza Nera:   3
Nodo:   17      colore: R       Altezza Nera:   3
Nodo:   14      colore: B       Altezza Nera:   2
Nodo:   10      colore: R       Altezza Nera:   2
Nodo:   7       colore: B       Altezza Nera:   1
Nodo:   3       colore: R       Altezza Nera:   1
Nodo:   12      colore: B       Altezza Nera:   1
Nodo:   16      colore: B       Altezza Nera:   1
Nodo:   15      colore: R       Altezza Nera:   1
Nodo:   21      colore: B       Altezza Nera:   2
Nodo:   19      colore: B       Altezza Nera:   1
Nodo:   20      colore: R       Altezza Nera:   1
Nodo:   23      colore: B       Altezza Nera:   1
Nodo:   41      colore: B       Altezza Nera:   2
Nodo:   30      colore: R       Altezza Nera:   2
Nodo:   28      colore: B       Altezza Nera:   1
Nodo:   38      colore: B       Altezza Nera:   1
Nodo:   35      colore: R       Altezza Nera:   1
Nodo:   39      colore: R       Altezza Nera:   1
Nodo:   47      colore: B       Altezza Nera:   1

Proprietà BST: OK
Proprietà 1: OK
Proprietà 2: OK
Proprietà 3: OK
Proprietà 4: OK
Proprietà 5: OK

Tutte le proprietà sono valide
Ripulito completamente
Dimensione in memoria di un nodo: 32
Dimensione in memoria di un albero: 24
==10986== 
==10986== HEAP SUMMARY:
==10986==     in use at exit: 32 bytes in 1 blocks
==10986==   total heap usage: 24 allocs, 23 frees, 2,744 bytes allocated
==10986== 
==10986== LEAK SUMMARY:
==10986==    definitely lost: 32 bytes in 1 blocks
==10986==    indirectly lost: 0 bytes in 0 blocks
==10986==      possibly lost: 0 bytes in 0 blocks
==10986==    still reachable: 0 bytes in 0 blocks
==10986==         suppressed: 0 bytes in 0 blocks
==10986== Rerun with --leak-check=full to see details of leaked memory
==10986== 
==10986== For lists of detected and suppressed errors, rerun with: -s
==10986== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
