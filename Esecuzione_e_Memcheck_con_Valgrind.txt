##################################### LISTE COLLEGATE ########################################################
gcc -g -Wall -Wextra listeCollegate.c && valgrind ./a.out 

==7050== Memcheck, a memory error detector
==7050== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7050== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==7050== Command: ./a.out
==7050== 
********* Test Liste collegate *********
Situazione della Lista dopo l'inserimento dei nodi:
23 66 45 6 190 5 17 
La dimensione della Lista è: 7
Situazione della Lista dopo la cancellazione del nodo il cui valore è 45:
23 66 6 190 5 17 
La dimensione della Lista è: 6

Inserire la chiave da cercare: 45
Ricerca del nodo con chiave 45:
Non trovato
==7050== 
==7050== HEAP SUMMARY:
==7050==     in use at exit: 24 bytes in 1 blocks
==7050==   total heap usage: 10 allocs, 9 frees, 2,232 bytes allocated
==7050== 
==7050== LEAK SUMMARY:
==7050==    definitely lost: 24 bytes in 1 blocks
==7050==    indirectly lost: 0 bytes in 0 blocks
==7050==      possibly lost: 0 bytes in 0 blocks
==7050==    still reachable: 0 bytes in 0 blocks
==7050==         suppressed: 0 bytes in 0 blocks
==7050== Rerun with --leak-check=full to see details of leaked memory
==7050== 
==7050== For lists of detected and suppressed errors, rerun with: -s
==7050== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

##################################### TABELLE HASH ########################################################

gcc -g -Wall -Wextra hashTable.c && valgrind ./a.out 

hashTable.c:48:1: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
   48 | const unsigned int hashFunction(hashtable_t *hashtbl, const int v);   // Funzione Modulo: implementata
      | ^~~~~
hashTable.c:222:1: warning: type qualifiers ignored on function return type [-Wignored-qualifiers]
  222 | const unsigned int hashFunction(hashtable_t *hashtbl, const int v) // implementata; v è una costante
      | ^~~~~
==7146== Memcheck, a memory error detector
==7146== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7146== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==7146== Command: ./a.out
==7146== 
Inserire la dimensione m della hashtable: 
10

Queste sono le chiavi che voglio mappare nella tabella hash:
16 12 25 39 6 122 5 68 75 

---------- TABELLA HASH DOPO INSERIMENTO DEI NODI ----------
0 => 
1 => 
2 => 122 12 
3 => 
4 => 
5 => 75 5 25 
6 => 6 16 
7 => 
8 => 68 
9 => 39 
Inserire una chiave da ricercare nella HT: 10
Elemento non trovato.
Inserire il nodo da cercare e, successivamente eliminare: 25

---------- TABELLA HASH DOPO ELIMINAZIONE DEL NODO 25 ----------
0 => 
1 => 
2 => 122 12 
3 => 
4 => 
5 => 75 5 
6 => 6 16 
7 => 
8 => 68 
9 => 39 
==7146== 
==7146== HEAP SUMMARY:
==7146==     in use at exit: 160 bytes in 11 blocks
==7146==   total heap usage: 33 allocs, 22 frees, 2,600 bytes allocated
==7146== 
==7146== LEAK SUMMARY:
==7146==    definitely lost: 80 bytes in 1 blocks
==7146==    indirectly lost: 80 bytes in 10 blocks
==7146==      possibly lost: 0 bytes in 0 blocks
==7146==    still reachable: 0 bytes in 0 blocks
==7146==         suppressed: 0 bytes in 0 blocks
==7146== Rerun with --leak-check=full to see details of leaked memory
==7146== 
==7146== For lists of detected and suppressed errors, rerun with: -s
==7146== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

##################################### ALBERI RED BLACK ########################################################

gcc -g -Wall -Wextra rbt.c && valgrind ./a.out 

==7272== Memcheck, a memory error detector
==7272== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7272== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==7272== Command: ./a.out
==7272== 

******************** RBT INSERT ********************

Visita IN-ORDER
Nodo:   3       colore: R
Nodo:   7       colore: B
Nodo:   10      colore: R
Nodo:   12      colore: B
Nodo:   14      colore: B
Nodo:   15      colore: R
Nodo:   16      colore: B
Nodo:   17      colore: R
Nodo:   19      colore: B
Nodo:   20      colore: R
Nodo:   21      colore: B
Nodo:   23      colore: B
Nodo:   26      colore: B
Nodo:   28      colore: B
Nodo:   30      colore: R
Nodo:   35      colore: R
Nodo:   38      colore: B
Nodo:   39      colore: R
Nodo:   41      colore: B
Nodo:   47      colore: B

Dimensione dell'albero: 20
Radice: 26 di colore: B
Il Padre della radice è T->nil

******************** RBT SEARCH ********************
Inserire il valore da cercare: 57
Non trovato

******************** MINIMO-MASSIMO ********************
Il nodo minimo vale: 3
Il nodo massimo vale: 47

******************** ALTEZZA ALBERO ********************
Visualizzo altezza albero (visitandolo in PreOrder):
Nodo:   26      colore: B       Altezza Nera:   3
Nodo:   17      colore: R       Altezza Nera:   3
Nodo:   14      colore: B       Altezza Nera:   2
Nodo:   10      colore: R       Altezza Nera:   2
Nodo:   7       colore: B       Altezza Nera:   1
Nodo:   3       colore: R       Altezza Nera:   1
Nodo:   12      colore: B       Altezza Nera:   1
Nodo:   16      colore: B       Altezza Nera:   1
Nodo:   15      colore: R       Altezza Nera:   1
Nodo:   21      colore: B       Altezza Nera:   2
Nodo:   19      colore: B       Altezza Nera:   1
Nodo:   20      colore: R       Altezza Nera:   1
Nodo:   23      colore: B       Altezza Nera:   1
Nodo:   41      colore: B       Altezza Nera:   2
Nodo:   30      colore: R       Altezza Nera:   2
Nodo:   28      colore: B       Altezza Nera:   1
Nodo:   38      colore: B       Altezza Nera:   1
Nodo:   35      colore: R       Altezza Nera:   1
Nodo:   39      colore: R       Altezza Nera:   1
Nodo:   47      colore: B       Altezza Nera:   1

Proprietà BST: OK
Proprietà 1: OK
Proprietà 2: OK
Proprietà 3: OK
Proprietà 4: OK
Proprietà 5: OK

Tutte le proprietà sono valide
Ripulito completamente
Dimensione in memoria di un nodo: 32
Dimensione in memoria di un albero: 24
==7272== 
==7272== HEAP SUMMARY:
==7272==     in use at exit: 32 bytes in 1 blocks
==7272==   total heap usage: 24 allocs, 23 frees, 2,744 bytes allocated
==7272== 
==7272== LEAK SUMMARY:
==7272==    definitely lost: 32 bytes in 1 blocks
==7272==    indirectly lost: 0 bytes in 0 blocks
==7272==      possibly lost: 0 bytes in 0 blocks
==7272==    still reachable: 0 bytes in 0 blocks
==7272==         suppressed: 0 bytes in 0 blocks
==7272== Rerun with --leak-check=full to see details of leaked memory
==7272== 
==7272== For lists of detected and suppressed errors, rerun with: -s
==7272== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
